import type { AnimatedContent, ElementInterfaceIntersect, GlobalData, LottieLayer, Shape, ShapeDataInterface, SVGElementInterface, Transformer } from '@/types';
import SVGShapeData from '@/elements/helpers/shapes/SVGShapeData';
import SVGStyleData from '@/elements/helpers/shapes/SVGStyleData';
import ShapeElement from '@/elements/ShapeElement';
export default class SVGShapeElement extends ShapeElement {
    _debug?: boolean;
    animatedContents: AnimatedContent[];
    createContainerElements: any;
    createRenderableComponents: any;
    destroyBaseElement: any;
    getBaseElement: any;
    getMatte: any;
    identityMatrix: any;
    initRendererElement: any;
    prevViewData: SVGElementInterface[];
    renderElement: any;
    setMatte: any;
    stylesList: SVGStyleData[];
    constructor(data: LottieLayer, globalData: GlobalData, comp: ElementInterfaceIntersect);
    addToAnimatedContents(data: Shape, element: SVGElementInterface): void;
    buildExpressionInterface(): void;
    createContent(): void;
    createGroupElement(data: Shape): any;
    createShapeElement(data: Shape, ownTransformers: Transformer[], level: number): any;
    createStyleElement(data: Shape, level: number): any;
    createTransformElement(data: Shape, container: SVGGElement): any;
    destroy(): void;
    filterUniqueShapes(): void;
    initSecondaryElement(): void;
    reloadShapes(): void;
    renderInnerContent(): void;
    renderShape(): void;
    searchShapes(arr: Shape[], itemsData: SVGElementInterface[], prevViewData: SVGElementInterface[], container: SVGGElement, level: number, transformers: Transformer[], shouldRenderFromProps: boolean): void;
    setElementStyles(elementData: SVGShapeData): void;
    setShapesAsAnimated(shapes: ShapeDataInterface[]): void;
}
