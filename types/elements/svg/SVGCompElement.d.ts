import type { CompElementInterface, ElementInterfaceIntersect, GlobalData, LottieLayer } from '../../types';
import type { KeyframedValueProperty } from '../../utils/Properties';
import SVGBaseElement from '../../elements/svg/SVGBaseElement';
export default class SVGCompElement extends SVGBaseElement {
    _debug?: boolean;
    addPendingElement: (element: ElementInterfaceIntersect) => void;
    appendElementInPos: (element: ElementInterfaceIntersect, pos: number) => void;
    buildAllItems: () => void;
    buildElementParenting: (element: ElementInterfaceIntersect, parentName?: number, hierarchy?: ElementInterfaceIntersect[]) => void;
    buildItem: (pos: number) => void;
    checkLayers: (val?: number) => void;
    checkPendingElements: () => void;
    completeLayers: boolean;
    configAnimation: (animData: import("../../types").AnimationData) => void;
    createAudio: (data: LottieLayer) => import("../AudioElement").default;
    createCamera: (_data: LottieLayer) => import("../html/HCameraElement").default;
    createFootage: (data: LottieLayer) => import("../FootageElement").default;
    createImage: (data: LottieLayer) => import("../ImageElement").default;
    createItem: (layer: LottieLayer) => import("../canvas/CVCompElement").default | import("../AudioElement").default | SVGCompElement | import("./SVGShapeElement").default | import("../html/HCompElement").default | import("../canvas/CVShapeElement").default | import("../html/HShapeElement").default | import("../canvas/CVImageElement").default | import("../ImageElement").default | import("../html/HImageElement").default | import("../canvas/CVSolidElement").default | import("../NullElement").default | import("./SVGTextElement").default | import("../canvas/CVTextElement").default | import("../html/HTextElement").default | import("../html/HCameraElement").default | import("../FootageElement").default;
    createNull: (data: LottieLayer) => import("../NullElement").default;
    createShape: (data: LottieLayer) => import("./SVGShapeElement").default;
    createSolid: (data: LottieLayer) => import("../SolidElement").default;
    createText: (data: LottieLayer) => import("./SVGTextElement").default;
    currentFrame: number;
    destroy: () => void;
    destroyElements: () => void;
    elements: ElementInterfaceIntersect[];
    findIndexByInd: (ind?: number) => number;
    getElementById: (ind: number) => ElementInterfaceIntersect | null;
    getElementByPath: (path: unknown[]) => ElementInterfaceIntersect | undefined;
    getElements: () => ElementInterfaceIntersect[] | undefined;
    hide: () => void;
    includeLayers: (newLayers: LottieLayer[]) => void;
    initElement: (data: LottieLayer, globalData: GlobalData, comp: CompElementInterface) => void;
    initItems: () => void;
    layers?: LottieLayer[];
    pendingElements: ElementInterfaceIntersect[];
    prepareFrame: (val: number) => void;
    renderedFrame: number;
    renderFrame: () => void;
    renderInnerContent: () => void;
    searchExtraCompositions: (assets: LottieLayer[]) => void;
    setElements: (elems: ElementInterfaceIntersect[]) => void;
    setProjectInterface: (pInterface: import("../../utils/expressions/ProjectInterface").default | null) => void;
    setupGlobalData: (animData: import("../../types").AnimationData, fontsContainer: HTMLElement | SVGDefsElement) => void;
    show: () => void;
    supports3d: boolean;
    tm?: KeyframedValueProperty;
    updateContainerSize: (_width?: number, _height?: number) => void;
    constructor(data: LottieLayer, globalData: GlobalData, comp: CompElementInterface);
    createComp(data: LottieLayer): SVGCompElement;
}
