import type { ElementInterfaceIntersect, GlobalData, LottieLayer, TextSpan } from '@/types';
import type LetterProps from '@/utils/text/LetterProps';
import TextElement from '@/elements/TextElement';
export default class CVTextElement extends TextElement {
    canvasContext?: CanvasRenderingContext2D;
    clearCanvas: (canvasContext?: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D | null) => void;
    createContainerElements: () => void;
    createContent: () => void;
    createElements: () => void;
    createRenderableComponents: () => void;
    currentRender: unknown;
    destroy: () => void;
    exitLayer: () => void;
    fill?: boolean;
    fillColorAnim: boolean;
    hide: () => void;
    hideElement: () => void;
    initRendererElement: () => void;
    justifyOffset: number;
    prepareLayer: () => void;
    renderedLetters: LetterProps[];
    renderFrame: (forceRender?: boolean) => void;
    renderLocalTransform: () => void;
    renderRenderable: () => void;
    searchEffectTransforms: () => void;
    setBlendMode: () => void;
    show: () => void;
    showElement: () => void;
    stroke?: boolean;
    strokeColorAnim: boolean;
    strokeWidthAnim: boolean;
    textSpans: TextSpan[];
    tHelper: CanvasRenderingContext2D | null;
    values: {
        fill: string;
        fValue: string;
        stroke: string;
        sWidth: number;
    };
    yOffset: number;
    constructor(data: LottieLayer, globalData: GlobalData, comp: ElementInterfaceIntersect);
    buildNewText(): void;
    renderInnerContent(): void;
}
