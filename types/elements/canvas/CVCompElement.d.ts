import type { CompElementInterface, ElementInterfaceIntersect, GlobalData, LottieLayer } from '../../types';
import CompElement from '../../elements/CompElement';
export default class CVCompElement extends CompElement {
    addPendingElement: (element: ElementInterfaceIntersect) => void;
    buildAllItems: () => void;
    buildElementParenting: (element: ElementInterfaceIntersect, parentName?: number, hierarchy?: ElementInterfaceIntersect[]) => void;
    buildItem: (pos: number) => void;
    canvasContext?: CanvasRenderingContext2D;
    checkLayers: (val?: number) => void;
    checkPendingElements: () => void;
    clearCanvas: (canvasContext?: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D | null) => void;
    configAnimation: (animData: import("../../types").AnimationData) => void;
    createAudio: (data: LottieLayer) => import("../AudioElement").default;
    createCamera: (_data: LottieLayer) => import("../html/HCameraElement").default;
    createContainerElements: () => void;
    createContent: () => void;
    createElements: () => void;
    createFootage: (data: LottieLayer) => import("../FootageElement").default;
    createImage: (data: LottieLayer) => import("./CVImageElement").default;
    createItem: (layer: LottieLayer) => CVCompElement | import("../html/HCompElement").default | import("../svg/SVGCompElement").default | import("../ImageElement").default | import("../AudioElement").default | import("../svg/SVGShapeElement").default | import("../svg/SVGTextElement").default | import("./CVTextElement").default | import("../html/HShapeElement").default | import("./CVShapeElement").default | import("../FootageElement").default | import("./CVImageElement").default | import("../html/HImageElement").default | import("./CVSolidElement").default | import("../NullElement").default | import("../html/HTextElement").default | import("../html/HCameraElement").default;
    createNull: (_layer: LottieLayer) => import("../NullElement").default;
    createRenderableComponents: () => void;
    createShape: (data: LottieLayer) => import("./CVShapeElement").default;
    createSolid: (data: LottieLayer) => import("./CVSolidElement").default;
    createText: (data: LottieLayer) => import("./CVTextElement").default;
    ctxFill: (rule?: CanvasFillRule) => void;
    ctxFillRect: (x: number, y: number, w: number, h: number) => void;
    ctxFillStyle: (value?: string) => void;
    ctxLineCap: (value: CanvasLineCap) => void;
    ctxLineJoin: (value: CanvasLineJoin) => void;
    ctxLineWidth: (value: number) => void;
    ctxMiterLimit: (value: number) => void;
    ctxOpacity: (op?: number) => void;
    ctxStroke: () => void;
    ctxStrokeStyle: (value?: string) => void;
    ctxTransform: (props: Float32Array) => void;
    exitLayer: () => void;
    getElementById: (ind: number) => null | ElementInterfaceIntersect;
    getElementByPath: (path: unknown[]) => ElementInterfaceIntersect | undefined;
    hide: () => void;
    hideElement: () => void;
    includeLayers: (newLayers: LottieLayer[]) => void;
    initItems: () => void;
    initRendererElement: () => void;
    pendingElements: ElementInterfaceIntersect[];
    prepareLayer: () => void;
    renderFrame: (forceRender?: number) => void;
    reset: () => void;
    restore: (actionFlag?: boolean) => void;
    save: (_flag?: boolean) => void;
    searchExtraCompositions: (assets: LottieLayer[]) => void;
    setBlendMode: () => void;
    setProjectInterface: (pInterface: import("../../utils/expressions/ProjectInterface").default | null) => void;
    setupGlobalData: (animData: import("../../types").AnimationData, fontsContainer: HTMLElement | SVGDefsElement) => void;
    show: () => void;
    showElement: () => void;
    updateContainerSize: (width?: number, height?: number) => void;
    constructor(data: LottieLayer, globalData: GlobalData, comp: CompElementInterface);
    createComp(data: LottieLayer): CVCompElement;
    destroy(): void;
    renderInnerContent(): void;
}
