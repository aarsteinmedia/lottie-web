import type { AnimationData, ElementInterfaceIntersect, GlobalData, LottieLayer, ThreeDElement } from '../../types';
import CompElement from '../../elements/CompElement';
import SVGCompElement from '../../elements/svg/SVGCompElement';
export default class HCompElement extends CompElement {
    pendingElements: ElementInterfaceIntersect[];
    supports3d?: boolean;
    svgElement?: SVGSVGElement;
    threeDElements: ThreeDElement[];
    transformedElement?: SVGGElement | HTMLElement;
    constructor(data: LottieLayer, globalData: GlobalData, comp: ElementInterfaceIntersect);
    _createBaseContainerElements(): void;
    addEffects(): void;
    addTo3dContainer(elem: Node, pos: number): void;
    appendElementInPos(_element: ElementInterfaceIntersect, _pos: number): void;
    build3dContainers(): void;
    buildElementParenting(_element: ElementInterfaceIntersect, _parentName?: number, _hierarchy?: ElementInterfaceIntersect[]): void;
    checkBlendMode(): void;
    checkPendingElements(): void;
    configAnimation(_data: AnimationData): void;
    createCamera(_data: LottieLayer): void;
    createComp(data: LottieLayer): HCompElement | SVGCompElement;
    createContainerElements(): void;
    createImage(_data: LottieLayer): void;
    createShape(_data: LottieLayer): void;
    createSolid(_data: LottieLayer): void;
    createText(_data: LottieLayer): void;
    createThreeDContainer(_pos: number, _type: string): void;
    getElementById(_id: number): void;
    getThreeDContainerByPos(_pos: number): void;
    initItems(): void;
    searchExtraCompositions(_assets: LottieLayer[]): void;
    setMatte(): void;
    updateContainerSize(): void;
}
