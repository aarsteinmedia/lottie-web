import type { DocumentData, TextData, Vector2, ElementInterfaceIntersect, TextEffectFunction } from '@/types';
import type LetterProps from '@/utils/text/LetterProps';
import BaseProperty from '@/utils/properties/BaseProperty';
export default class TextProperty extends BaseProperty {
    _frameId: number;
    canResize: boolean;
    currentData: DocumentData;
    data: TextData;
    defaultBoxWidth: Vector2;
    effectsSequence: TextEffectFunction[];
    elem: ElementInterfaceIntersect;
    keysIndex: number;
    minimumFontSize: number;
    pv: DocumentData | string;
    v: DocumentData | string;
    constructor(elem: ElementInterfaceIntersect, data: TextData);
    addEffect(effectFunction: TextEffectFunction): void;
    buildFinalText(text: string): string[];
    calculateExpression(_text: string): number;
    canResizeFont(_canResize: boolean): void;
    completeTextData(documentData: DocumentData): void;
    copyData(obj: DocumentData, data: DocumentData | LetterProps): DocumentData;
    getExpressionValue(_currentValue: DocumentData, _text: string): void;
    getKeyframeValue(): any;
    getValue(_finalValue?: unknown): number;
    recalculate(index: number): void;
    searchExpressions(): boolean | null;
    searchKeyframes(): any;
    searchProperty(): any;
    setCurrentData(data: DocumentData): void;
    setMinimumFontSize(_fontValue: number): void;
    updateDocumentData(newData: DocumentData, indexFromProps?: number): void;
}
