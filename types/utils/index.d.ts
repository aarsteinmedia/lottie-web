import type { AnimationDirection, Constructor, IntersectData, Marker, MarkerData, Vector2, Vector3, Vector4 } from '../types';
import type ShapePath from '../utils/shapes/ShapePath';
import PolynomialBezier from '../elements/PolynomialBezier';
import Matrix from '../utils/Matrix';
export declare const addBrightnessToRGB: (color: Vector3, offset: number) => Vector3, addHueToRGB: (color: Vector3, offset: number) => Vector3, addSaturationToRGB: (color: Vector3, offset: number) => Vector3, buildShapeString: (pathNodes: ShapePath, length: number, closed: boolean, mat: Matrix) => string, createNS: <T extends SVGElement>(type: string) => T, createTag: <T extends HTMLElement>(type: string) => T, createQuaternion: (values: Vector3) => Vector4, degToRads: number, extendPrototype: (sources: Constructor[], destination: Constructor) => void, floatEqual: (a: number, b: number) => boolean, floatZero: (f: number) => boolean, getBlendMode: (mode?: number) => string, getProjectingAngle: (path: ShapePath, cur: number) => number, hslToRGB: (val: number[]) => Vector4, hueToRGB: (p: number, q: number, tFromProps: number) => number, inBrowser: () => boolean, intersectData: (bez: PolynomialBezier, t1: number, t2: number) => IntersectData, intersectsImpl: (d1: IntersectData, d2: IntersectData, depth: number, tolerance: number, intersections: unknown[], maxRecursion: number) => void, isArrayOfNum: (input: unknown) => input is number[], isSafari: () => boolean, isServer: () => boolean, joinLines: (outputBezier: ShapePath, seg1: PolynomialBezier, seg2: PolynomialBezier, lineJoin: number, miterLimit: number) => Vector2, lerpPoint: (p0: Vector2, p1: Vector2, amount: number) => Vector2, markerParser: (markersFromProps: (MarkerData | Marker)[]) => (MarkerData | Marker)[], offsetSegmentSplit: (segment: PolynomialBezier, amount: number) => PolynomialBezier[], polynomialCoefficients: (p0: number, p1: number, p2: number, p3: number) => number[], pointEqual: (p1: Vector2, p2: Vector2) => boolean, pruneIntersections: (segments: PolynomialBezier[][]) => PolynomialBezier[][], quadRoots: (a: number, b: number, c: number) => number[], quaternionToEuler: (out: Vector3, quat: Vector4) => void, rgbToHex: (rVal: number, gVal: number, bVal: number) => string, rgbToHSL: (val: Vector4) => number[], setPoint: (outputBezier: ShapePath, point: Vector2, angle: number, direction: AnimationDirection, amplitude: number, outAmplitude: number, inAmplitude: number) => void, singlePoint: (p: Vector2) => PolynomialBezier, slerp: (a: Vector4, b: Vector4, t: number) => Vector4, styleDiv: (element: HTMLElement | SVGSVGElement) => void;
