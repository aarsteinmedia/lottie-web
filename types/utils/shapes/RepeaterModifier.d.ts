import type ShapeGroupData from '../../elements/helpers/shapes/ShapeGroupData';
import type SVGShapeData from '../../elements/helpers/shapes/SVGShapeData';
import type { ElementInterfaceIntersect, ElementInterfaceUnion, Shape } from '../../types';
import type { ValueProperty } from '../../utils/Properties';
import Matrix from '../../utils/Matrix';
import ShapeModifier from '../../utils/shapes/ShapeModifier';
import { type TransformProperty } from '../../utils/TransformProperty';
export default class RepeaterModifier extends ShapeModifier {
    arr: Shape[];
    c?: ValueProperty;
    data?: Shape;
    elemsData: ShapeGroupData[];
    eo?: ValueProperty;
    matrix?: Matrix;
    o?: ValueProperty;
    pMatrix?: Matrix;
    pos?: number;
    rMatrix?: Matrix;
    sMatrix?: Matrix;
    so?: ValueProperty;
    tMatrix?: Matrix;
    tr?: TransformProperty;
    private _currentCopies?;
    private _elements;
    private _groups;
    addShapeToModifier(shapeData: SVGShapeData): void;
    applyTransforms(pMatrix: Matrix, rMatrix: Matrix, sMatrix: Matrix, transform: TransformProperty, perc: number, inv?: boolean): void;
    changeGroupRender(elements: Shape[], renderFlag?: boolean): void;
    cloneElements(elements: Shape[]): Shape[];
    init(elem: ElementInterfaceUnion, arr: Shape | Shape[], posFromProps?: number, elemsData?: ShapeGroupData[]): void;
    initModifierProperties(elem: ElementInterfaceIntersect, data: Shape): void;
    processShapes(_isFirstFrame: boolean): boolean;
    resetElements(elements: Shape[]): void;
}
