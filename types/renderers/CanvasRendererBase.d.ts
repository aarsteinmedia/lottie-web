import type CVContextData from '@/elements/canvas/CVContextData';
import type { AnimationData, CanvasRendererConfig, LottieLayer, TransformCanvas } from '@/types';
import BaseRenderer from '@/renderers/BaseRenderer';
export default abstract class CanvasRendererBase extends BaseRenderer {
    canvasContext?: null | CanvasRenderingContext2D;
    contextData?: CVContextData;
    destroyed?: boolean;
    renderConfig?: CanvasRendererConfig;
    transformCanvas?: TransformCanvas;
    buildItem(pos: number): void;
    checkPendingElements(): void;
    configAnimation(animData: AnimationData): void;
    createImage(data: LottieLayer): any;
    createShape(data: LottieLayer): any;
    createSolid(data: LottieLayer): any;
    createText(data: LottieLayer): any;
    ctxFill(rule?: CanvasFillRule): void;
    ctxFillRect(x: number, y: number, w: number, h: number): void;
    ctxFillStyle(value?: string): void;
    ctxLineCap(value: CanvasLineCap): void;
    ctxLineJoin(value: CanvasLineJoin): void;
    ctxLineWidth(value: number): void;
    ctxMiterLimit(value: number): void;
    ctxOpacity(op?: number): void;
    ctxStroke(): void;
    ctxStrokeStyle(value?: string): void;
    ctxTransform(props: Float32Array): void;
    destroy(): void;
    hide(): void;
    renderFrame(num: number, forceRender?: boolean): void;
    reset(): void;
    restore(actionFlag?: boolean): void;
    save(_flag?: boolean): void;
    show(): void;
    updateContainerSize(width?: number, height?: number): void;
}
