import type AnimationItem from '../animation/AnimationItem';
import type CVCompElement from '../elements/canvas/CVCompElement';
import type CVImageElement from '../elements/canvas/CVImageElement';
import type CVShapeElement from '../elements/canvas/CVShapeElement';
import type CVSolidElement from '../elements/canvas/CVSolidElement';
import type CVTextElement from '../elements/canvas/CVTextElement';
import type HCameraElement from '../elements/html/HCameraElement';
import type HCompElement from '../elements/html/HCompElement';
import type HImageElement from '../elements/html/HImageElement';
import type HShapeElement from '../elements/html/HShapeElement';
import type HTextElement from '../elements/html/HTextElement';
import type ImageElement from '../elements/ImageElement';
import type NullElement from '../elements/NullElement';
import type SolidElement from '../elements/SolidElement';
import type SVGCompElement from '../elements/svg/SVGCompElement';
import type SVGShapeElement from '../elements/svg/SVGShapeElement';
import type SVGTextLottieElement from '../elements/svg/SVGTextElement';
import type { AnimationData, CompElementInterface, ElementInterfaceIntersect, LottieLayer } from '../types';
import type ProjectInterface from '../utils/expressions/ProjectInterface';
import AudioElement from '../elements/AudioElement';
import FootageElement from '../elements/FootageElement';
import FrameElement from '../elements/helpers/FrameElement';
export default abstract class BaseRenderer extends FrameElement {
    animationItem?: AnimationItem;
    completeLayers?: boolean;
    currentFrame: number;
    elements: ElementInterfaceIntersect[];
    layers: LottieLayer[];
    pendingElements: ElementInterfaceIntersect[];
    renderedFrame: number;
    addPendingElement(element: ElementInterfaceIntersect): void;
    buildAllItems(): void;
    buildElementParenting(element: ElementInterfaceIntersect, parentName?: number, hierarchy?: ElementInterfaceIntersect[]): void;
    buildItem(_val: number): void;
    checkLayers(val?: number): void;
    checkPendingElements(): void;
    createAudio(data: LottieLayer): AudioElement;
    createCamera(_data: LottieLayer): HCameraElement;
    createComp(_data: LottieLayer, _container?: HTMLElement, _comp?: CompElementInterface, _?: unknown): SVGCompElement | CVCompElement | HCompElement;
    createFootage(data: LottieLayer): FootageElement;
    createImage(_layer: LottieLayer): CVImageElement | ImageElement | HImageElement;
    createItem(layer: LottieLayer): CVCompElement | AudioElement | SVGCompElement | SVGShapeElement | HCompElement | CVShapeElement | HShapeElement | CVImageElement | ImageElement | HImageElement | CVSolidElement | NullElement | SVGTextLottieElement | CVTextElement | HTextElement | HCameraElement | FootageElement;
    createNull(_layer: LottieLayer): NullElement;
    createShape(_layer: LottieLayer): CVShapeElement | SVGShapeElement | HShapeElement;
    createSolid(_layer: LottieLayer): CVSolidElement | SolidElement;
    createText(_layer: LottieLayer): SVGTextLottieElement | CVTextElement | HTextElement;
    getElementById(ind: number): ElementInterfaceIntersect | null;
    getElementByPath(path: unknown[]): ElementInterfaceIntersect | undefined;
    includeLayers(newLayers: LottieLayer[]): void;
    initItems(): void;
    prepareFrame(_num: number): void;
    searchExtraCompositions(assets: LottieLayer[]): void;
    setProjectInterface(pInterface: ProjectInterface | null): void;
    setupGlobalData(animData: AnimationData, fontsContainer: HTMLElement | SVGDefsElement): void;
}
