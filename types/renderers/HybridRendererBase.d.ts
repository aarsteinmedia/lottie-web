import type AnimationItem from '@/animation/AnimationItem';
import type { AnimationData, ElementInterfaceIntersect, HTMLRendererConfig, LottieLayer, ThreeDElements } from '@/types';
import HCameraElement from '@/elements/html/HCameraElement';
import BaseRenderer from '@/renderers/BaseRenderer';
import { RendererType } from '@/utils/enums';
export default class HybridRendererBase extends BaseRenderer {
    camera?: HCameraElement;
    destroyed: boolean;
    renderConfig: HTMLRendererConfig;
    rendererType: RendererType;
    resizerElem?: HTMLDivElement;
    supports3d: boolean;
    threeDElements: ThreeDElements[];
    constructor(animationItem: AnimationItem, config?: HTMLRendererConfig);
    addTo3dContainer(elem: HTMLElement, pos: number): void;
    appendElementInPos(element: ElementInterfaceIntersect, pos: number): void;
    build3dContainers(): void;
    checkPendingElements(): void;
    configAnimation(animData: AnimationData): void;
    createCamera(data: LottieLayer): any;
    createImage(data: LottieLayer): any;
    createShape(data: LottieLayer): any;
    createSolid(data: LottieLayer): any;
    createText(data: LottieLayer): any;
    createThreeDContainer(pos: number, type: string): {
        container: any;
        endPos: number;
        perspectiveElem: any;
        startPos: number;
        type: string;
    };
    destroy(): void;
    getThreeDContainerByPos(pos: number): any;
    hide(): void;
    initItems(): void;
    renderFrame(_num: number | null): void;
    searchExtraCompositions(assets: LottieLayer[]): void;
    show(): void;
    updateContainerSize(): void;
}
